// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: redpanda/core/admin/v2/broker.proto

package adminv2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetBrokerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBrokerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrokerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrokerRequestMultiError, or nil if none found.
func (m *GetBrokerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrokerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GetBrokerRequestMultiError(errors)
	}

	return nil
}

// GetBrokerRequestMultiError is an error wrapping multiple validation errors
// returned by GetBrokerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBrokerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrokerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrokerRequestMultiError) AllErrors() []error { return m }

// GetBrokerRequestValidationError is the validation error returned by
// GetBrokerRequest.Validate if the designated constraints aren't met.
type GetBrokerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrokerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrokerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrokerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrokerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrokerRequestValidationError) ErrorName() string { return "GetBrokerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBrokerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrokerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrokerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrokerRequestValidationError{}

// Validate checks the field values on GetBrokerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBrokerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrokerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrokerResponseMultiError, or nil if none found.
func (m *GetBrokerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrokerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBroker()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBrokerResponseValidationError{
					field:  "Broker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBrokerResponseValidationError{
					field:  "Broker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBrokerResponseValidationError{
				field:  "Broker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBrokerResponseMultiError(errors)
	}

	return nil
}

// GetBrokerResponseMultiError is an error wrapping multiple validation errors
// returned by GetBrokerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBrokerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrokerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrokerResponseMultiError) AllErrors() []error { return m }

// GetBrokerResponseValidationError is the validation error returned by
// GetBrokerResponse.Validate if the designated constraints aren't met.
type GetBrokerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrokerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrokerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrokerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrokerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrokerResponseValidationError) ErrorName() string {
	return "GetBrokerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBrokerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrokerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrokerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrokerResponseValidationError{}

// Validate checks the field values on ListBrokersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBrokersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrokersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBrokersRequestMultiError, or nil if none found.
func (m *ListBrokersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrokersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBrokersRequestMultiError(errors)
	}

	return nil
}

// ListBrokersRequestMultiError is an error wrapping multiple validation errors
// returned by ListBrokersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBrokersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrokersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrokersRequestMultiError) AllErrors() []error { return m }

// ListBrokersRequestValidationError is the validation error returned by
// ListBrokersRequest.Validate if the designated constraints aren't met.
type ListBrokersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrokersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrokersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrokersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrokersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrokersRequestValidationError) ErrorName() string {
	return "ListBrokersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBrokersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrokersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrokersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrokersRequestValidationError{}

// Validate checks the field values on ListBrokersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBrokersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrokersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBrokersResponseMultiError, or nil if none found.
func (m *ListBrokersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrokersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBrokers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBrokersResponseValidationError{
						field:  fmt.Sprintf("Brokers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBrokersResponseValidationError{
						field:  fmt.Sprintf("Brokers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBrokersResponseValidationError{
					field:  fmt.Sprintf("Brokers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBrokersResponseMultiError(errors)
	}

	return nil
}

// ListBrokersResponseMultiError is an error wrapping multiple validation
// errors returned by ListBrokersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBrokersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrokersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrokersResponseMultiError) AllErrors() []error { return m }

// ListBrokersResponseValidationError is the validation error returned by
// ListBrokersResponse.Validate if the designated constraints aren't met.
type ListBrokersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrokersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrokersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrokersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrokersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrokersResponseValidationError) ErrorName() string {
	return "ListBrokersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBrokersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrokersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrokersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrokersResponseValidationError{}

// Validate checks the field values on Broker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Broker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Broker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BrokerMultiError, or nil if none found.
func (m *Broker) ValidateAll() error {
	return m.validate(true)
}

func (m *Broker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if all {
		switch v := interface{}(m.GetBuildInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrokerValidationError{
					field:  "BuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrokerValidationError{
					field:  "BuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBuildInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrokerValidationError{
				field:  "BuildInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAdminServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrokerValidationError{
					field:  "AdminServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrokerValidationError{
					field:  "AdminServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrokerValidationError{
				field:  "AdminServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BrokerMultiError(errors)
	}

	return nil
}

// BrokerMultiError is an error wrapping multiple validation errors returned by
// Broker.ValidateAll() if the designated constraints aren't met.
type BrokerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrokerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrokerMultiError) AllErrors() []error { return m }

// BrokerValidationError is the validation error returned by Broker.Validate if
// the designated constraints aren't met.
type BrokerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrokerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrokerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrokerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrokerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrokerValidationError) ErrorName() string { return "BrokerValidationError" }

// Error satisfies the builtin error interface
func (e BrokerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrokerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrokerValidationError{}

// Validate checks the field values on BuildInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BuildInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BuildInfoMultiError, or nil
// if none found.
func (m *BuildInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for BuildSha

	if len(errors) > 0 {
		return BuildInfoMultiError(errors)
	}

	return nil
}

// BuildInfoMultiError is an error wrapping multiple validation errors returned
// by BuildInfo.ValidateAll() if the designated constraints aren't met.
type BuildInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildInfoMultiError) AllErrors() []error { return m }

// BuildInfoValidationError is the validation error returned by
// BuildInfo.Validate if the designated constraints aren't met.
type BuildInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildInfoValidationError) ErrorName() string { return "BuildInfoValidationError" }

// Error satisfies the builtin error interface
func (e BuildInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildInfoValidationError{}

// Validate checks the field values on AdminServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminServerMultiError, or
// nil if none found.
func (m *AdminServer) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminServerValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminServerValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminServerValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminServerMultiError(errors)
	}

	return nil
}

// AdminServerMultiError is an error wrapping multiple validation errors
// returned by AdminServer.ValidateAll() if the designated constraints aren't met.
type AdminServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServerMultiError) AllErrors() []error { return m }

// AdminServerValidationError is the validation error returned by
// AdminServer.Validate if the designated constraints aren't met.
type AdminServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServerValidationError) ErrorName() string { return "AdminServerValidationError" }

// Error satisfies the builtin error interface
func (e AdminServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServerValidationError{}

// Validate checks the field values on RPCRoute with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RPCRoute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RPCRoute with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RPCRouteMultiError, or nil
// if none found.
func (m *RPCRoute) ValidateAll() error {
	return m.validate(true)
}

func (m *RPCRoute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for HttpRoute

	if len(errors) > 0 {
		return RPCRouteMultiError(errors)
	}

	return nil
}

// RPCRouteMultiError is an error wrapping multiple validation errors returned
// by RPCRoute.ValidateAll() if the designated constraints aren't met.
type RPCRouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RPCRouteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RPCRouteMultiError) AllErrors() []error { return m }

// RPCRouteValidationError is the validation error returned by
// RPCRoute.Validate if the designated constraints aren't met.
type RPCRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RPCRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RPCRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RPCRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RPCRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RPCRouteValidationError) ErrorName() string { return "RPCRouteValidationError" }

// Error satisfies the builtin error interface
func (e RPCRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRPCRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RPCRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RPCRouteValidationError{}
