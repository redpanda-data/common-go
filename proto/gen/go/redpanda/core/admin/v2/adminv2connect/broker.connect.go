// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/core/admin/v2/broker.proto

package adminv2connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v2 "github.com/redpanda-data/common-go/proto/gen/go/redpanda/core/admin/v2"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BrokerServiceName is the fully-qualified name of the BrokerService service.
	BrokerServiceName = "redpanda.core.admin.v2.BrokerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BrokerServiceGetBrokerProcedure is the fully-qualified name of the BrokerService's GetBroker RPC.
	BrokerServiceGetBrokerProcedure = "/redpanda.core.admin.v2.BrokerService/GetBroker"
	// BrokerServiceListBrokersProcedure is the fully-qualified name of the BrokerService's ListBrokers
	// RPC.
	BrokerServiceListBrokersProcedure = "/redpanda.core.admin.v2.BrokerService/ListBrokers"
)

// BrokerServiceClient is a client for the redpanda.core.admin.v2.BrokerService service.
type BrokerServiceClient interface {
	// GetBroker returns information about a single broker in the cluster.
	GetBroker(context.Context, *connect.Request[v2.GetBrokerRequest]) (*connect.Response[v2.GetBrokerResponse], error)
	// ListBrokers returns information about all brokers in the cluster.
	ListBrokers(context.Context, *connect.Request[v2.ListBrokersRequest]) (*connect.Response[v2.ListBrokersResponse], error)
}

// NewBrokerServiceClient constructs a client for the redpanda.core.admin.v2.BrokerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBrokerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BrokerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	brokerServiceMethods := v2.File_redpanda_core_admin_v2_broker_proto.Services().ByName("BrokerService").Methods()
	return &brokerServiceClient{
		getBroker: connect.NewClient[v2.GetBrokerRequest, v2.GetBrokerResponse](
			httpClient,
			baseURL+BrokerServiceGetBrokerProcedure,
			connect.WithSchema(brokerServiceMethods.ByName("GetBroker")),
			connect.WithClientOptions(opts...),
		),
		listBrokers: connect.NewClient[v2.ListBrokersRequest, v2.ListBrokersResponse](
			httpClient,
			baseURL+BrokerServiceListBrokersProcedure,
			connect.WithSchema(brokerServiceMethods.ByName("ListBrokers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// brokerServiceClient implements BrokerServiceClient.
type brokerServiceClient struct {
	getBroker   *connect.Client[v2.GetBrokerRequest, v2.GetBrokerResponse]
	listBrokers *connect.Client[v2.ListBrokersRequest, v2.ListBrokersResponse]
}

// GetBroker calls redpanda.core.admin.v2.BrokerService.GetBroker.
func (c *brokerServiceClient) GetBroker(ctx context.Context, req *connect.Request[v2.GetBrokerRequest]) (*connect.Response[v2.GetBrokerResponse], error) {
	return c.getBroker.CallUnary(ctx, req)
}

// ListBrokers calls redpanda.core.admin.v2.BrokerService.ListBrokers.
func (c *brokerServiceClient) ListBrokers(ctx context.Context, req *connect.Request[v2.ListBrokersRequest]) (*connect.Response[v2.ListBrokersResponse], error) {
	return c.listBrokers.CallUnary(ctx, req)
}

// BrokerServiceHandler is an implementation of the redpanda.core.admin.v2.BrokerService service.
type BrokerServiceHandler interface {
	// GetBroker returns information about a single broker in the cluster.
	GetBroker(context.Context, *connect.Request[v2.GetBrokerRequest]) (*connect.Response[v2.GetBrokerResponse], error)
	// ListBrokers returns information about all brokers in the cluster.
	ListBrokers(context.Context, *connect.Request[v2.ListBrokersRequest]) (*connect.Response[v2.ListBrokersResponse], error)
}

// NewBrokerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBrokerServiceHandler(svc BrokerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	brokerServiceMethods := v2.File_redpanda_core_admin_v2_broker_proto.Services().ByName("BrokerService").Methods()
	brokerServiceGetBrokerHandler := connect.NewUnaryHandler(
		BrokerServiceGetBrokerProcedure,
		svc.GetBroker,
		connect.WithSchema(brokerServiceMethods.ByName("GetBroker")),
		connect.WithHandlerOptions(opts...),
	)
	brokerServiceListBrokersHandler := connect.NewUnaryHandler(
		BrokerServiceListBrokersProcedure,
		svc.ListBrokers,
		connect.WithSchema(brokerServiceMethods.ByName("ListBrokers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.core.admin.v2.BrokerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BrokerServiceGetBrokerProcedure:
			brokerServiceGetBrokerHandler.ServeHTTP(w, r)
		case BrokerServiceListBrokersProcedure:
			brokerServiceListBrokersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBrokerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBrokerServiceHandler struct{}

func (UnimplementedBrokerServiceHandler) GetBroker(context.Context, *connect.Request[v2.GetBrokerRequest]) (*connect.Response[v2.GetBrokerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.core.admin.v2.BrokerService.GetBroker is not implemented"))
}

func (UnimplementedBrokerServiceHandler) ListBrokers(context.Context, *connect.Request[v2.ListBrokersRequest]) (*connect.Response[v2.ListBrokersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.core.admin.v2.BrokerService.ListBrokers is not implemented"))
}
