// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/redpanda/core/admin/v2/shadow_link.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/redpanda-data/common-go/proto/gen/go/redpanda/core/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.ACLResource(0)
)

// Validate checks the field values on ShadowLink with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowLink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowLink with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowLinkMultiError, or
// nil if none found.
func (m *ShadowLink) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowLink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	if all {
		switch v := interface{}(m.GetConfigurations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShadowLinkValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShadowLinkValidationError{
					field:  "Configurations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigurations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShadowLinkValidationError{
				field:  "Configurations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShadowLinkValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShadowLinkValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShadowLinkValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShadowLinkMultiError(errors)
	}

	return nil
}

// ShadowLinkMultiError is an error wrapping multiple validation errors
// returned by ShadowLink.ValidateAll() if the designated constraints aren't met.
type ShadowLinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowLinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowLinkMultiError) AllErrors() []error { return m }

// ShadowLinkValidationError is the validation error returned by
// ShadowLink.Validate if the designated constraints aren't met.
type ShadowLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowLinkValidationError) ErrorName() string { return "ShadowLinkValidationError" }

// Error satisfies the builtin error interface
func (e ShadowLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowLinkValidationError{}

// Validate checks the field values on CreateShadowLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShadowLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShadowLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShadowLinkRequestMultiError, or nil if none found.
func (m *CreateShadowLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShadowLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShadowLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShadowLinkRequestValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShadowLinkRequestValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShadowLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShadowLinkRequestValidationError{
				field:  "ShadowLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShadowLinkRequestMultiError(errors)
	}

	return nil
}

// CreateShadowLinkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShadowLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShadowLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShadowLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShadowLinkRequestMultiError) AllErrors() []error { return m }

// CreateShadowLinkRequestValidationError is the validation error returned by
// CreateShadowLinkRequest.Validate if the designated constraints aren't met.
type CreateShadowLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShadowLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShadowLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShadowLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShadowLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShadowLinkRequestValidationError) ErrorName() string {
	return "CreateShadowLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShadowLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShadowLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShadowLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShadowLinkRequestValidationError{}

// Validate checks the field values on CreateShadowLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShadowLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShadowLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShadowLinkResponseMultiError, or nil if none found.
func (m *CreateShadowLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShadowLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShadowLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShadowLinkResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShadowLinkResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShadowLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShadowLinkResponseValidationError{
				field:  "ShadowLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShadowLinkResponseMultiError(errors)
	}

	return nil
}

// CreateShadowLinkResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShadowLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShadowLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShadowLinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShadowLinkResponseMultiError) AllErrors() []error { return m }

// CreateShadowLinkResponseValidationError is the validation error returned by
// CreateShadowLinkResponse.Validate if the designated constraints aren't met.
type CreateShadowLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShadowLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShadowLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShadowLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShadowLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShadowLinkResponseValidationError) ErrorName() string {
	return "CreateShadowLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShadowLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShadowLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShadowLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShadowLinkResponseValidationError{}

// Validate checks the field values on DeleteShadowLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShadowLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShadowLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShadowLinkRequestMultiError, or nil if none found.
func (m *DeleteShadowLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShadowLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteShadowLinkRequestMultiError(errors)
	}

	return nil
}

// DeleteShadowLinkRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteShadowLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteShadowLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShadowLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShadowLinkRequestMultiError) AllErrors() []error { return m }

// DeleteShadowLinkRequestValidationError is the validation error returned by
// DeleteShadowLinkRequest.Validate if the designated constraints aren't met.
type DeleteShadowLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShadowLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShadowLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShadowLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShadowLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShadowLinkRequestValidationError) ErrorName() string {
	return "DeleteShadowLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShadowLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShadowLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShadowLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShadowLinkRequestValidationError{}

// Validate checks the field values on DeleteShadowLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShadowLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShadowLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShadowLinkResponseMultiError, or nil if none found.
func (m *DeleteShadowLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShadowLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShadowLinkResponseMultiError(errors)
	}

	return nil
}

// DeleteShadowLinkResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteShadowLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteShadowLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShadowLinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShadowLinkResponseMultiError) AllErrors() []error { return m }

// DeleteShadowLinkResponseValidationError is the validation error returned by
// DeleteShadowLinkResponse.Validate if the designated constraints aren't met.
type DeleteShadowLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShadowLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShadowLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShadowLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShadowLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShadowLinkResponseValidationError) ErrorName() string {
	return "DeleteShadowLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShadowLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShadowLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShadowLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShadowLinkResponseValidationError{}

// Validate checks the field values on GetShadowLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShadowLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShadowLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShadowLinkRequestMultiError, or nil if none found.
func (m *GetShadowLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShadowLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetShadowLinkRequestMultiError(errors)
	}

	return nil
}

// GetShadowLinkRequestMultiError is an error wrapping multiple validation
// errors returned by GetShadowLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShadowLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShadowLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShadowLinkRequestMultiError) AllErrors() []error { return m }

// GetShadowLinkRequestValidationError is the validation error returned by
// GetShadowLinkRequest.Validate if the designated constraints aren't met.
type GetShadowLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShadowLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShadowLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShadowLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShadowLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShadowLinkRequestValidationError) ErrorName() string {
	return "GetShadowLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShadowLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShadowLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShadowLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShadowLinkRequestValidationError{}

// Validate checks the field values on GetShadowLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShadowLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShadowLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShadowLinkResponseMultiError, or nil if none found.
func (m *GetShadowLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShadowLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShadowLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShadowLinkResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShadowLinkResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShadowLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShadowLinkResponseValidationError{
				field:  "ShadowLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShadowLinkResponseMultiError(errors)
	}

	return nil
}

// GetShadowLinkResponseMultiError is an error wrapping multiple validation
// errors returned by GetShadowLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShadowLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShadowLinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShadowLinkResponseMultiError) AllErrors() []error { return m }

// GetShadowLinkResponseValidationError is the validation error returned by
// GetShadowLinkResponse.Validate if the designated constraints aren't met.
type GetShadowLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShadowLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShadowLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShadowLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShadowLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShadowLinkResponseValidationError) ErrorName() string {
	return "GetShadowLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShadowLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShadowLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShadowLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShadowLinkResponseValidationError{}

// Validate checks the field values on ListShadowLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShadowLinksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShadowLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShadowLinksRequestMultiError, or nil if none found.
func (m *ListShadowLinksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShadowLinksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListShadowLinksRequestMultiError(errors)
	}

	return nil
}

// ListShadowLinksRequestMultiError is an error wrapping multiple validation
// errors returned by ListShadowLinksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListShadowLinksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShadowLinksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShadowLinksRequestMultiError) AllErrors() []error { return m }

// ListShadowLinksRequestValidationError is the validation error returned by
// ListShadowLinksRequest.Validate if the designated constraints aren't met.
type ListShadowLinksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShadowLinksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShadowLinksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShadowLinksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShadowLinksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShadowLinksRequestValidationError) ErrorName() string {
	return "ListShadowLinksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShadowLinksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShadowLinksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShadowLinksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShadowLinksRequestValidationError{}

// Validate checks the field values on ListShadowLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShadowLinksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShadowLinksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShadowLinksResponseMultiError, or nil if none found.
func (m *ListShadowLinksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShadowLinksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShadowLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShadowLinksResponseValidationError{
						field:  fmt.Sprintf("ShadowLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShadowLinksResponseValidationError{
						field:  fmt.Sprintf("ShadowLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShadowLinksResponseValidationError{
					field:  fmt.Sprintf("ShadowLinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListShadowLinksResponseMultiError(errors)
	}

	return nil
}

// ListShadowLinksResponseMultiError is an error wrapping multiple validation
// errors returned by ListShadowLinksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListShadowLinksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShadowLinksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShadowLinksResponseMultiError) AllErrors() []error { return m }

// ListShadowLinksResponseValidationError is the validation error returned by
// ListShadowLinksResponse.Validate if the designated constraints aren't met.
type ListShadowLinksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShadowLinksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShadowLinksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShadowLinksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShadowLinksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShadowLinksResponseValidationError) ErrorName() string {
	return "ListShadowLinksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShadowLinksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShadowLinksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShadowLinksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShadowLinksResponseValidationError{}

// Validate checks the field values on UpdateShadowLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShadowLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShadowLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShadowLinkRequestMultiError, or nil if none found.
func (m *UpdateShadowLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShadowLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShadowLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShadowLinkRequestValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShadowLinkRequestValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShadowLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShadowLinkRequestValidationError{
				field:  "ShadowLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShadowLinkRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShadowLinkRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShadowLinkRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShadowLinkRequestMultiError(errors)
	}

	return nil
}

// UpdateShadowLinkRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateShadowLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateShadowLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShadowLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShadowLinkRequestMultiError) AllErrors() []error { return m }

// UpdateShadowLinkRequestValidationError is the validation error returned by
// UpdateShadowLinkRequest.Validate if the designated constraints aren't met.
type UpdateShadowLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShadowLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShadowLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShadowLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShadowLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShadowLinkRequestValidationError) ErrorName() string {
	return "UpdateShadowLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShadowLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShadowLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShadowLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShadowLinkRequestValidationError{}

// Validate checks the field values on UpdateShadowLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShadowLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShadowLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShadowLinkResponseMultiError, or nil if none found.
func (m *UpdateShadowLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShadowLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShadowLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShadowLinkResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShadowLinkResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShadowLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShadowLinkResponseValidationError{
				field:  "ShadowLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShadowLinkResponseMultiError(errors)
	}

	return nil
}

// UpdateShadowLinkResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateShadowLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateShadowLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShadowLinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShadowLinkResponseMultiError) AllErrors() []error { return m }

// UpdateShadowLinkResponseValidationError is the validation error returned by
// UpdateShadowLinkResponse.Validate if the designated constraints aren't met.
type UpdateShadowLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShadowLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShadowLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShadowLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShadowLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShadowLinkResponseValidationError) ErrorName() string {
	return "UpdateShadowLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShadowLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShadowLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShadowLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShadowLinkResponseValidationError{}

// Validate checks the field values on FailOverRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FailOverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FailOverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FailOverRequestMultiError, or nil if none found.
func (m *FailOverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FailOverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ShadowTopicName

	if len(errors) > 0 {
		return FailOverRequestMultiError(errors)
	}

	return nil
}

// FailOverRequestMultiError is an error wrapping multiple validation errors
// returned by FailOverRequest.ValidateAll() if the designated constraints
// aren't met.
type FailOverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailOverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailOverRequestMultiError) AllErrors() []error { return m }

// FailOverRequestValidationError is the validation error returned by
// FailOverRequest.Validate if the designated constraints aren't met.
type FailOverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailOverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailOverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailOverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailOverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailOverRequestValidationError) ErrorName() string { return "FailOverRequestValidationError" }

// Error satisfies the builtin error interface
func (e FailOverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailOverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailOverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailOverRequestValidationError{}

// Validate checks the field values on FailOverResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FailOverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FailOverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FailOverResponseMultiError, or nil if none found.
func (m *FailOverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FailOverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShadowLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FailOverResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FailOverResponseValidationError{
					field:  "ShadowLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShadowLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FailOverResponseValidationError{
				field:  "ShadowLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FailOverResponseMultiError(errors)
	}

	return nil
}

// FailOverResponseMultiError is an error wrapping multiple validation errors
// returned by FailOverResponse.ValidateAll() if the designated constraints
// aren't met.
type FailOverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailOverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailOverResponseMultiError) AllErrors() []error { return m }

// FailOverResponseValidationError is the validation error returned by
// FailOverResponse.Validate if the designated constraints aren't met.
type FailOverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailOverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailOverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailOverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailOverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailOverResponseValidationError) ErrorName() string { return "FailOverResponseValidationError" }

// Error satisfies the builtin error interface
func (e FailOverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailOverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailOverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailOverResponseValidationError{}

// Validate checks the field values on ShadowLinkConfigurations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShadowLinkConfigurations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowLinkConfigurations with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShadowLinkConfigurationsMultiError, or nil if none found.
func (m *ShadowLinkConfigurations) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowLinkConfigurations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClientOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "ClientOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "ClientOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShadowLinkConfigurationsValidationError{
				field:  "ClientOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTopicMetadataSyncOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "TopicMetadataSyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "TopicMetadataSyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTopicMetadataSyncOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShadowLinkConfigurationsValidationError{
				field:  "TopicMetadataSyncOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConsumerOffsetSyncOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "ConsumerOffsetSyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "ConsumerOffsetSyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumerOffsetSyncOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShadowLinkConfigurationsValidationError{
				field:  "ConsumerOffsetSyncOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecuritySyncOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "SecuritySyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShadowLinkConfigurationsValidationError{
					field:  "SecuritySyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecuritySyncOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShadowLinkConfigurationsValidationError{
				field:  "SecuritySyncOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShadowLinkConfigurationsMultiError(errors)
	}

	return nil
}

// ShadowLinkConfigurationsMultiError is an error wrapping multiple validation
// errors returned by ShadowLinkConfigurations.ValidateAll() if the designated
// constraints aren't met.
type ShadowLinkConfigurationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowLinkConfigurationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowLinkConfigurationsMultiError) AllErrors() []error { return m }

// ShadowLinkConfigurationsValidationError is the validation error returned by
// ShadowLinkConfigurations.Validate if the designated constraints aren't met.
type ShadowLinkConfigurationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowLinkConfigurationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowLinkConfigurationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowLinkConfigurationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowLinkConfigurationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowLinkConfigurationsValidationError) ErrorName() string {
	return "ShadowLinkConfigurationsValidationError"
}

// Error satisfies the builtin error interface
func (e ShadowLinkConfigurationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowLinkConfigurations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowLinkConfigurationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowLinkConfigurationsValidationError{}

// Validate checks the field values on ShadowLinkClientOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShadowLinkClientOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowLinkClientOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShadowLinkClientOptionsMultiError, or nil if none found.
func (m *ShadowLinkClientOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowLinkClientOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for SourceClusterId

	// no validation rules for MetadataMaxAgeMs

	// no validation rules for ConnectionTimeoutMs

	// no validation rules for RetryBackoffMs

	// no validation rules for FetchWaitMaxMs

	// no validation rules for FetchMinBytes

	// no validation rules for FetchMaxBytes

	if m.TlsSettings != nil {

		if all {
			switch v := interface{}(m.GetTlsSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShadowLinkClientOptionsValidationError{
						field:  "TlsSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShadowLinkClientOptionsValidationError{
						field:  "TlsSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTlsSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShadowLinkClientOptionsValidationError{
					field:  "TlsSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AuthenticationConfiguration != nil {

		if all {
			switch v := interface{}(m.GetAuthenticationConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShadowLinkClientOptionsValidationError{
						field:  "AuthenticationConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShadowLinkClientOptionsValidationError{
						field:  "AuthenticationConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthenticationConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShadowLinkClientOptionsValidationError{
					field:  "AuthenticationConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShadowLinkClientOptionsMultiError(errors)
	}

	return nil
}

// ShadowLinkClientOptionsMultiError is an error wrapping multiple validation
// errors returned by ShadowLinkClientOptions.ValidateAll() if the designated
// constraints aren't met.
type ShadowLinkClientOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowLinkClientOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowLinkClientOptionsMultiError) AllErrors() []error { return m }

// ShadowLinkClientOptionsValidationError is the validation error returned by
// ShadowLinkClientOptions.Validate if the designated constraints aren't met.
type ShadowLinkClientOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowLinkClientOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowLinkClientOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowLinkClientOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowLinkClientOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowLinkClientOptionsValidationError) ErrorName() string {
	return "ShadowLinkClientOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ShadowLinkClientOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowLinkClientOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowLinkClientOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowLinkClientOptionsValidationError{}

// Validate checks the field values on TopicMetadataSyncOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopicMetadataSyncOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicMetadataSyncOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopicMetadataSyncOptionsMultiError, or nil if none found.
func (m *TopicMetadataSyncOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicMetadataSyncOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopicMetadataSyncOptionsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopicMetadataSyncOptionsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopicMetadataSyncOptionsValidationError{
				field:  "Interval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTopicFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopicMetadataSyncOptionsValidationError{
						field:  fmt.Sprintf("TopicFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopicMetadataSyncOptionsValidationError{
						field:  fmt.Sprintf("TopicFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopicMetadataSyncOptionsValidationError{
					field:  fmt.Sprintf("TopicFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TopicMetadataSyncOptionsMultiError(errors)
	}

	return nil
}

// TopicMetadataSyncOptionsMultiError is an error wrapping multiple validation
// errors returned by TopicMetadataSyncOptions.ValidateAll() if the designated
// constraints aren't met.
type TopicMetadataSyncOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicMetadataSyncOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicMetadataSyncOptionsMultiError) AllErrors() []error { return m }

// TopicMetadataSyncOptionsValidationError is the validation error returned by
// TopicMetadataSyncOptions.Validate if the designated constraints aren't met.
type TopicMetadataSyncOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicMetadataSyncOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicMetadataSyncOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicMetadataSyncOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicMetadataSyncOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicMetadataSyncOptionsValidationError) ErrorName() string {
	return "TopicMetadataSyncOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e TopicMetadataSyncOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicMetadataSyncOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicMetadataSyncOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicMetadataSyncOptionsValidationError{}

// Validate checks the field values on ConsumerOffsetSyncOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumerOffsetSyncOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerOffsetSyncOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumerOffsetSyncOptionsMultiError, or nil if none found.
func (m *ConsumerOffsetSyncOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerOffsetSyncOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumerOffsetSyncOptionsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumerOffsetSyncOptionsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumerOffsetSyncOptionsValidationError{
				field:  "Interval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enabled

	for idx, item := range m.GetGroupFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsumerOffsetSyncOptionsValidationError{
						field:  fmt.Sprintf("GroupFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsumerOffsetSyncOptionsValidationError{
						field:  fmt.Sprintf("GroupFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumerOffsetSyncOptionsValidationError{
					field:  fmt.Sprintf("GroupFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsumerOffsetSyncOptionsMultiError(errors)
	}

	return nil
}

// ConsumerOffsetSyncOptionsMultiError is an error wrapping multiple validation
// errors returned by ConsumerOffsetSyncOptions.ValidateAll() if the
// designated constraints aren't met.
type ConsumerOffsetSyncOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerOffsetSyncOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerOffsetSyncOptionsMultiError) AllErrors() []error { return m }

// ConsumerOffsetSyncOptionsValidationError is the validation error returned by
// ConsumerOffsetSyncOptions.Validate if the designated constraints aren't met.
type ConsumerOffsetSyncOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerOffsetSyncOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerOffsetSyncOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerOffsetSyncOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerOffsetSyncOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerOffsetSyncOptionsValidationError) ErrorName() string {
	return "ConsumerOffsetSyncOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumerOffsetSyncOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerOffsetSyncOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerOffsetSyncOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerOffsetSyncOptionsValidationError{}

// Validate checks the field values on SecuritySettingsSyncOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecuritySettingsSyncOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecuritySettingsSyncOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecuritySettingsSyncOptionsMultiError, or nil if none found.
func (m *SecuritySettingsSyncOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *SecuritySettingsSyncOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecuritySettingsSyncOptionsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecuritySettingsSyncOptionsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecuritySettingsSyncOptionsValidationError{
				field:  "Interval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enabled

	for idx, item := range m.GetRoleFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecuritySettingsSyncOptionsValidationError{
						field:  fmt.Sprintf("RoleFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecuritySettingsSyncOptionsValidationError{
						field:  fmt.Sprintf("RoleFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecuritySettingsSyncOptionsValidationError{
					field:  fmt.Sprintf("RoleFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetScramCredFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecuritySettingsSyncOptionsValidationError{
						field:  fmt.Sprintf("ScramCredFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecuritySettingsSyncOptionsValidationError{
						field:  fmt.Sprintf("ScramCredFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecuritySettingsSyncOptionsValidationError{
					field:  fmt.Sprintf("ScramCredFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAclFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecuritySettingsSyncOptionsValidationError{
						field:  fmt.Sprintf("AclFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecuritySettingsSyncOptionsValidationError{
						field:  fmt.Sprintf("AclFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecuritySettingsSyncOptionsValidationError{
					field:  fmt.Sprintf("AclFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecuritySettingsSyncOptionsMultiError(errors)
	}

	return nil
}

// SecuritySettingsSyncOptionsMultiError is an error wrapping multiple
// validation errors returned by SecuritySettingsSyncOptions.ValidateAll() if
// the designated constraints aren't met.
type SecuritySettingsSyncOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecuritySettingsSyncOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecuritySettingsSyncOptionsMultiError) AllErrors() []error { return m }

// SecuritySettingsSyncOptionsValidationError is the validation error returned
// by SecuritySettingsSyncOptions.Validate if the designated constraints
// aren't met.
type SecuritySettingsSyncOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecuritySettingsSyncOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecuritySettingsSyncOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecuritySettingsSyncOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecuritySettingsSyncOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecuritySettingsSyncOptionsValidationError) ErrorName() string {
	return "SecuritySettingsSyncOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e SecuritySettingsSyncOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecuritySettingsSyncOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecuritySettingsSyncOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecuritySettingsSyncOptionsValidationError{}

// Validate checks the field values on TLSSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TLSSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TLSSettingsMultiError, or
// nil if none found.
func (m *TLSSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.TlsSettings.(type) {
	case *TLSSettings_TlsFileSettings:
		if v == nil {
			err := TLSSettingsValidationError{
				field:  "TlsSettings",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTlsFileSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TLSSettingsValidationError{
						field:  "TlsFileSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TLSSettingsValidationError{
						field:  "TlsFileSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTlsFileSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TLSSettingsValidationError{
					field:  "TlsFileSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TLSSettings_TlsPemSettings:
		if v == nil {
			err := TLSSettingsValidationError{
				field:  "TlsSettings",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTlsPemSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TLSSettingsValidationError{
						field:  "TlsPemSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TLSSettingsValidationError{
						field:  "TlsPemSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTlsPemSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TLSSettingsValidationError{
					field:  "TlsPemSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TLSSettingsMultiError(errors)
	}

	return nil
}

// TLSSettingsMultiError is an error wrapping multiple validation errors
// returned by TLSSettings.ValidateAll() if the designated constraints aren't met.
type TLSSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSSettingsMultiError) AllErrors() []error { return m }

// TLSSettingsValidationError is the validation error returned by
// TLSSettings.Validate if the designated constraints aren't met.
type TLSSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSSettingsValidationError) ErrorName() string { return "TLSSettingsValidationError" }

// Error satisfies the builtin error interface
func (e TLSSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSSettingsValidationError{}

// Validate checks the field values on AuthenticationConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationConfigurationMultiError, or nil if none found.
func (m *AuthenticationConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Authentication.(type) {
	case *AuthenticationConfiguration_ScramConfiguration:
		if v == nil {
			err := AuthenticationConfigurationValidationError{
				field:  "Authentication",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScramConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthenticationConfigurationValidationError{
						field:  "ScramConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthenticationConfigurationValidationError{
						field:  "ScramConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScramConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthenticationConfigurationValidationError{
					field:  "ScramConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AuthenticationConfigurationMultiError(errors)
	}

	return nil
}

// AuthenticationConfigurationMultiError is an error wrapping multiple
// validation errors returned by AuthenticationConfiguration.ValidateAll() if
// the designated constraints aren't met.
type AuthenticationConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationConfigurationMultiError) AllErrors() []error { return m }

// AuthenticationConfigurationValidationError is the validation error returned
// by AuthenticationConfiguration.Validate if the designated constraints
// aren't met.
type AuthenticationConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationConfigurationValidationError) ErrorName() string {
	return "AuthenticationConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationConfigurationValidationError{}

// Validate checks the field values on TLSFileSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TLSFileSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSFileSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TLSFileSettingsMultiError, or nil if none found.
func (m *TLSFileSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSFileSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaPath

	// no validation rules for KeyPath

	// no validation rules for CertPath

	if len(errors) > 0 {
		return TLSFileSettingsMultiError(errors)
	}

	return nil
}

// TLSFileSettingsMultiError is an error wrapping multiple validation errors
// returned by TLSFileSettings.ValidateAll() if the designated constraints
// aren't met.
type TLSFileSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSFileSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSFileSettingsMultiError) AllErrors() []error { return m }

// TLSFileSettingsValidationError is the validation error returned by
// TLSFileSettings.Validate if the designated constraints aren't met.
type TLSFileSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSFileSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSFileSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSFileSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSFileSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSFileSettingsValidationError) ErrorName() string { return "TLSFileSettingsValidationError" }

// Error satisfies the builtin error interface
func (e TLSFileSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSFileSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSFileSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSFileSettingsValidationError{}

// Validate checks the field values on TLSPEMSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TLSPEMSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSPEMSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TLSPEMSettingsMultiError,
// or nil if none found.
func (m *TLSPEMSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSPEMSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ca

	// no validation rules for Key

	// no validation rules for KeyFingerprint

	// no validation rules for Cert

	if len(errors) > 0 {
		return TLSPEMSettingsMultiError(errors)
	}

	return nil
}

// TLSPEMSettingsMultiError is an error wrapping multiple validation errors
// returned by TLSPEMSettings.ValidateAll() if the designated constraints
// aren't met.
type TLSPEMSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSPEMSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSPEMSettingsMultiError) AllErrors() []error { return m }

// TLSPEMSettingsValidationError is the validation error returned by
// TLSPEMSettings.Validate if the designated constraints aren't met.
type TLSPEMSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSPEMSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSPEMSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSPEMSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSPEMSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSPEMSettingsValidationError) ErrorName() string { return "TLSPEMSettingsValidationError" }

// Error satisfies the builtin error interface
func (e TLSPEMSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSPEMSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSPEMSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSPEMSettingsValidationError{}

// Validate checks the field values on ScramConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScramConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScramConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScramConfigMultiError, or
// nil if none found.
func (m *ScramConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ScramConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for PasswordSet

	if all {
		switch v := interface{}(m.GetPasswordSetAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScramConfigValidationError{
					field:  "PasswordSetAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScramConfigValidationError{
					field:  "PasswordSetAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPasswordSetAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScramConfigValidationError{
				field:  "PasswordSetAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScramMechanism

	if len(errors) > 0 {
		return ScramConfigMultiError(errors)
	}

	return nil
}

// ScramConfigMultiError is an error wrapping multiple validation errors
// returned by ScramConfig.ValidateAll() if the designated constraints aren't met.
type ScramConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScramConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScramConfigMultiError) AllErrors() []error { return m }

// ScramConfigValidationError is the validation error returned by
// ScramConfig.Validate if the designated constraints aren't met.
type ScramConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScramConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScramConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScramConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScramConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScramConfigValidationError) ErrorName() string { return "ScramConfigValidationError" }

// Error satisfies the builtin error interface
func (e ScramConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScramConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScramConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScramConfigValidationError{}

// Validate checks the field values on NameFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NameFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NameFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NameFilterMultiError, or
// nil if none found.
func (m *NameFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NameFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PatternType

	// no validation rules for FilterType

	// no validation rules for Name

	if len(errors) > 0 {
		return NameFilterMultiError(errors)
	}

	return nil
}

// NameFilterMultiError is an error wrapping multiple validation errors
// returned by NameFilter.ValidateAll() if the designated constraints aren't met.
type NameFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NameFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NameFilterMultiError) AllErrors() []error { return m }

// NameFilterValidationError is the validation error returned by
// NameFilter.Validate if the designated constraints aren't met.
type NameFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameFilterValidationError) ErrorName() string { return "NameFilterValidationError" }

// Error satisfies the builtin error interface
func (e NameFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNameFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameFilterValidationError{}

// Validate checks the field values on ACLFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ACLFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ACLFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ACLFilterMultiError, or nil
// if none found.
func (m *ACLFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ACLFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ACLFilterValidationError{
					field:  "ResourceFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ACLFilterValidationError{
					field:  "ResourceFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ACLFilterValidationError{
				field:  "ResourceFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccessFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ACLFilterValidationError{
					field:  "AccessFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ACLFilterValidationError{
					field:  "AccessFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ACLFilterValidationError{
				field:  "AccessFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ACLFilterMultiError(errors)
	}

	return nil
}

// ACLFilterMultiError is an error wrapping multiple validation errors returned
// by ACLFilter.ValidateAll() if the designated constraints aren't met.
type ACLFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ACLFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ACLFilterMultiError) AllErrors() []error { return m }

// ACLFilterValidationError is the validation error returned by
// ACLFilter.Validate if the designated constraints aren't met.
type ACLFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ACLFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ACLFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ACLFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ACLFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ACLFilterValidationError) ErrorName() string { return "ACLFilterValidationError" }

// Error satisfies the builtin error interface
func (e ACLFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sACLFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ACLFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ACLFilterValidationError{}

// Validate checks the field values on ACLResourceFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ACLResourceFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ACLResourceFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ACLResourceFilterMultiError, or nil if none found.
func (m *ACLResourceFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ACLResourceFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for PatternType

	// no validation rules for Name

	if len(errors) > 0 {
		return ACLResourceFilterMultiError(errors)
	}

	return nil
}

// ACLResourceFilterMultiError is an error wrapping multiple validation errors
// returned by ACLResourceFilter.ValidateAll() if the designated constraints
// aren't met.
type ACLResourceFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ACLResourceFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ACLResourceFilterMultiError) AllErrors() []error { return m }

// ACLResourceFilterValidationError is the validation error returned by
// ACLResourceFilter.Validate if the designated constraints aren't met.
type ACLResourceFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ACLResourceFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ACLResourceFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ACLResourceFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ACLResourceFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ACLResourceFilterValidationError) ErrorName() string {
	return "ACLResourceFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ACLResourceFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sACLResourceFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ACLResourceFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ACLResourceFilterValidationError{}

// Validate checks the field values on ACLAccessFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ACLAccessFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ACLAccessFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ACLAccessFilterMultiError, or nil if none found.
func (m *ACLAccessFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ACLAccessFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Principal

	// no validation rules for Operation

	// no validation rules for PermissionType

	// no validation rules for Host

	if len(errors) > 0 {
		return ACLAccessFilterMultiError(errors)
	}

	return nil
}

// ACLAccessFilterMultiError is an error wrapping multiple validation errors
// returned by ACLAccessFilter.ValidateAll() if the designated constraints
// aren't met.
type ACLAccessFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ACLAccessFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ACLAccessFilterMultiError) AllErrors() []error { return m }

// ACLAccessFilterValidationError is the validation error returned by
// ACLAccessFilter.Validate if the designated constraints aren't met.
type ACLAccessFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ACLAccessFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ACLAccessFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ACLAccessFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ACLAccessFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ACLAccessFilterValidationError) ErrorName() string { return "ACLAccessFilterValidationError" }

// Error satisfies the builtin error interface
func (e ACLAccessFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sACLAccessFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ACLAccessFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ACLAccessFilterValidationError{}

// Validate checks the field values on ShadowLinkStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShadowLinkStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowLinkStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShadowLinkStatusMultiError, or nil if none found.
func (m *ShadowLinkStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowLinkStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	for idx, item := range m.GetTaskStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShadowLinkStatusValidationError{
						field:  fmt.Sprintf("TaskStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShadowLinkStatusValidationError{
						field:  fmt.Sprintf("TaskStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShadowLinkStatusValidationError{
					field:  fmt.Sprintf("TaskStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetShadowTopicStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShadowLinkStatusValidationError{
						field:  fmt.Sprintf("ShadowTopicStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShadowLinkStatusValidationError{
						field:  fmt.Sprintf("ShadowTopicStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShadowLinkStatusValidationError{
					field:  fmt.Sprintf("ShadowTopicStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShadowLinkStatusMultiError(errors)
	}

	return nil
}

// ShadowLinkStatusMultiError is an error wrapping multiple validation errors
// returned by ShadowLinkStatus.ValidateAll() if the designated constraints
// aren't met.
type ShadowLinkStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowLinkStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowLinkStatusMultiError) AllErrors() []error { return m }

// ShadowLinkStatusValidationError is the validation error returned by
// ShadowLinkStatus.Validate if the designated constraints aren't met.
type ShadowLinkStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowLinkStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowLinkStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowLinkStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowLinkStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowLinkStatusValidationError) ErrorName() string { return "ShadowLinkStatusValidationError" }

// Error satisfies the builtin error interface
func (e ShadowLinkStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowLinkStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowLinkStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowLinkStatusValidationError{}

// Validate checks the field values on ShadowLinkTaskStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShadowLinkTaskStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowLinkTaskStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShadowLinkTaskStatusMultiError, or nil if none found.
func (m *ShadowLinkTaskStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowLinkTaskStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for State

	// no validation rules for Reason

	// no validation rules for BrokerId

	if len(errors) > 0 {
		return ShadowLinkTaskStatusMultiError(errors)
	}

	return nil
}

// ShadowLinkTaskStatusMultiError is an error wrapping multiple validation
// errors returned by ShadowLinkTaskStatus.ValidateAll() if the designated
// constraints aren't met.
type ShadowLinkTaskStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowLinkTaskStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowLinkTaskStatusMultiError) AllErrors() []error { return m }

// ShadowLinkTaskStatusValidationError is the validation error returned by
// ShadowLinkTaskStatus.Validate if the designated constraints aren't met.
type ShadowLinkTaskStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowLinkTaskStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowLinkTaskStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowLinkTaskStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowLinkTaskStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowLinkTaskStatusValidationError) ErrorName() string {
	return "ShadowLinkTaskStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ShadowLinkTaskStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowLinkTaskStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowLinkTaskStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowLinkTaskStatusValidationError{}

// Validate checks the field values on ShadowTopicStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShadowTopicStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowTopicStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShadowTopicStatusMultiError, or nil if none found.
func (m *ShadowTopicStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowTopicStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for TopicId

	// no validation rules for State

	for idx, item := range m.GetPartitionInformation() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShadowTopicStatusValidationError{
						field:  fmt.Sprintf("PartitionInformation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShadowTopicStatusValidationError{
						field:  fmt.Sprintf("PartitionInformation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShadowTopicStatusValidationError{
					field:  fmt.Sprintf("PartitionInformation[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShadowTopicStatusMultiError(errors)
	}

	return nil
}

// ShadowTopicStatusMultiError is an error wrapping multiple validation errors
// returned by ShadowTopicStatus.ValidateAll() if the designated constraints
// aren't met.
type ShadowTopicStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowTopicStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowTopicStatusMultiError) AllErrors() []error { return m }

// ShadowTopicStatusValidationError is the validation error returned by
// ShadowTopicStatus.Validate if the designated constraints aren't met.
type ShadowTopicStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowTopicStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowTopicStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowTopicStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowTopicStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowTopicStatusValidationError) ErrorName() string {
	return "ShadowTopicStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ShadowTopicStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowTopicStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowTopicStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowTopicStatusValidationError{}

// Validate checks the field values on TopicPartitionInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopicPartitionInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicPartitionInformation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopicPartitionInformationMultiError, or nil if none found.
func (m *TopicPartitionInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicPartitionInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartitionId

	// no validation rules for SourceLastStableOffset

	// no validation rules for SourceHighWatermark

	// no validation rules for HighWatermark

	if len(errors) > 0 {
		return TopicPartitionInformationMultiError(errors)
	}

	return nil
}

// TopicPartitionInformationMultiError is an error wrapping multiple validation
// errors returned by TopicPartitionInformation.ValidateAll() if the
// designated constraints aren't met.
type TopicPartitionInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicPartitionInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicPartitionInformationMultiError) AllErrors() []error { return m }

// TopicPartitionInformationValidationError is the validation error returned by
// TopicPartitionInformation.Validate if the designated constraints aren't met.
type TopicPartitionInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicPartitionInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicPartitionInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicPartitionInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicPartitionInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicPartitionInformationValidationError) ErrorName() string {
	return "TopicPartitionInformationValidationError"
}

// Error satisfies the builtin error interface
func (e TopicPartitionInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicPartitionInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicPartitionInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicPartitionInformationValidationError{}
