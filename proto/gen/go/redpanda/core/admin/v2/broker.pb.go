// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: redpanda/core/admin/v2/broker.proto

package adminv2

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/common-go/proto/gen/go/redpanda/pbgen"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetBrokerRequest returns information about a single broker in the cluster
type GetBrokerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The node ID for the broker. If set to -1 then the broker handling the RPC
	// request will response with it's own information.
	NodeId        int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBrokerRequest) Reset() {
	*x = GetBrokerRequest{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrokerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerRequest) ProtoMessage() {}

func (x *GetBrokerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerRequest.ProtoReflect.Descriptor instead.
func (*GetBrokerRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{0}
}

func (x *GetBrokerRequest) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// GetBrokerResponse is the response from the GetBroker RPC.
type GetBrokerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specified broker and it's information.
	Broker        *Broker `protobuf:"bytes,1,opt,name=broker,proto3" json:"broker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBrokerResponse) Reset() {
	*x = GetBrokerResponse{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrokerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerResponse) ProtoMessage() {}

func (x *GetBrokerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerResponse.ProtoReflect.Descriptor instead.
func (*GetBrokerResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{1}
}

func (x *GetBrokerResponse) GetBroker() *Broker {
	if x != nil {
		return x.Broker
	}
	return nil
}

// ListBrokersRequest returns information about all the brokers in the cluster
type ListBrokersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBrokersRequest) Reset() {
	*x = ListBrokersRequest{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBrokersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBrokersRequest) ProtoMessage() {}

func (x *ListBrokersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBrokersRequest.ProtoReflect.Descriptor instead.
func (*ListBrokersRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{2}
}

// ListBrokersResponse is the response from the ListBrokers RPC.
type ListBrokersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The brokers in the cluster and their information.
	Brokers       []*Broker `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBrokersResponse) Reset() {
	*x = ListBrokersResponse{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBrokersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBrokersResponse) ProtoMessage() {}

func (x *ListBrokersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBrokersResponse.ProtoReflect.Descriptor instead.
func (*ListBrokersResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{3}
}

func (x *ListBrokersResponse) GetBrokers() []*Broker {
	if x != nil {
		return x.Brokers
	}
	return nil
}

// The resource for an individual broker within the Kafka Cluster.
type Broker struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This broker's node ID.
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The build this broker is running.
	BuildInfo *BuildInfo `protobuf:"bytes,2,opt,name=build_info,json=buildInfo,proto3" json:"build_info,omitempty"`
	// The admin server information.
	AdminServer   *AdminServer `protobuf:"bytes,3,opt,name=admin_server,json=adminServer,proto3" json:"admin_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Broker) Reset() {
	*x = Broker{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Broker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broker) ProtoMessage() {}

func (x *Broker) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broker.ProtoReflect.Descriptor instead.
func (*Broker) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{4}
}

func (x *Broker) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Broker) GetBuildInfo() *BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

func (x *Broker) GetAdminServer() *AdminServer {
	if x != nil {
		return x.AdminServer
	}
	return nil
}

// BuildInfo contains information about the Redpanda build.
type BuildInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A version string of Redpanda like "v25.2.1"
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The git commit SHA of the build.
	BuildSha      string `protobuf:"bytes,2,opt,name=build_sha,json=buildSha,proto3" json:"build_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildInfo) Reset() {
	*x = BuildInfo{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfo) ProtoMessage() {}

func (x *BuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildInfo.ProtoReflect.Descriptor instead.
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{5}
}

func (x *BuildInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BuildInfo) GetBuildSha() string {
	if x != nil {
		return x.BuildSha
	}
	return ""
}

// AdminServer has information about the admin server within the broker.
type AdminServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All of the ConnectRPC routes available on this admin server.
	Routes        []*RPCRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminServer) Reset() {
	*x = AdminServer{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServer) ProtoMessage() {}

func (x *AdminServer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServer.ProtoReflect.Descriptor instead.
func (*AdminServer) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{6}
}

func (x *AdminServer) GetRoutes() []*RPCRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

// A route in the Admin API RPC server.
type RPCRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the RPC method.
	//
	// For example `redpanda.core.admin.v2.AdminService.GetVersion`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The HTTP route for this RPC method.
	//
	// For example `/redpanda.core.admin.v2.AdminService/GetVersion`
	HttpRoute     string `protobuf:"bytes,2,opt,name=http_route,json=httpRoute,proto3" json:"http_route,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCRoute) Reset() {
	*x = RPCRoute{}
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCRoute) ProtoMessage() {}

func (x *RPCRoute) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_core_admin_v2_broker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCRoute.ProtoReflect.Descriptor instead.
func (*RPCRoute) Descriptor() ([]byte, []int) {
	return file_redpanda_core_admin_v2_broker_proto_rawDescGZIP(), []int{7}
}

func (x *RPCRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RPCRoute) GetHttpRoute() string {
	if x != nil {
		return x.HttpRoute
	}
	return ""
}

var File_redpanda_core_admin_v2_broker_proto protoreflect.FileDescriptor

const file_redpanda_core_admin_v2_broker_proto_rawDesc = "" +
	"\n" +
	"#redpanda/core/admin/v2/broker.proto\x12\x16redpanda.core.admin.v2\x1a\x1credpanda/pbgen/options.proto\x1a\x18redpanda/pbgen/rpc.proto\"+\n" +
	"\x10GetBrokerRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\x05R\x06nodeId\"K\n" +
	"\x11GetBrokerResponse\x126\n" +
	"\x06broker\x18\x01 \x01(\v2\x1e.redpanda.core.admin.v2.BrokerR\x06broker\"\x14\n" +
	"\x12ListBrokersRequest\"O\n" +
	"\x13ListBrokersResponse\x128\n" +
	"\abrokers\x18\x01 \x03(\v2\x1e.redpanda.core.admin.v2.BrokerR\abrokers\"\xab\x01\n" +
	"\x06Broker\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\x05R\x06nodeId\x12@\n" +
	"\n" +
	"build_info\x18\x02 \x01(\v2!.redpanda.core.admin.v2.BuildInfoR\tbuildInfo\x12F\n" +
	"\fadmin_server\x18\x03 \x01(\v2#.redpanda.core.admin.v2.AdminServerR\vadminServer\"B\n" +
	"\tBuildInfo\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1b\n" +
	"\tbuild_sha\x18\x02 \x01(\tR\bbuildSha\"G\n" +
	"\vAdminServer\x128\n" +
	"\x06routes\x18\x01 \x03(\v2 .redpanda.core.admin.v2.RPCRouteR\x06routes\"=\n" +
	"\bRPCRoute\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"http_route\x18\x02 \x01(\tR\thttpRoute2\xe9\x01\n" +
	"\rBrokerService\x12h\n" +
	"\tGetBroker\x12(.redpanda.core.admin.v2.GetBrokerRequest\x1a).redpanda.core.admin.v2.GetBrokerResponse\"\x06\xea\x92\x19\x02\x10\x03\x12n\n" +
	"\vListBrokers\x12*.redpanda.core.admin.v2.ListBrokersRequest\x1a+.redpanda.core.admin.v2.ListBrokersResponse\"\x06\xea\x92\x19\x02\x10\x03B\x84\x02\xea\x92\x19\fproto::admin\n" +
	"\x1acom.redpanda.core.admin.v2B\vBrokerProtoP\x01ZNgithub.com/redpanda-data/common-go/proto/gen/go/redpanda/core/admin/v2;adminv2\xa2\x02\x03RCA\xaa\x02\x16Redpanda.Core.Admin.V2\xca\x02\x16Redpanda\\Core\\Admin\\V2\xe2\x02\"Redpanda\\Core\\Admin\\V2\\GPBMetadata\xea\x02\x19Redpanda::Core::Admin::V2b\x06proto3"

var (
	file_redpanda_core_admin_v2_broker_proto_rawDescOnce sync.Once
	file_redpanda_core_admin_v2_broker_proto_rawDescData []byte
)

func file_redpanda_core_admin_v2_broker_proto_rawDescGZIP() []byte {
	file_redpanda_core_admin_v2_broker_proto_rawDescOnce.Do(func() {
		file_redpanda_core_admin_v2_broker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_redpanda_core_admin_v2_broker_proto_rawDesc), len(file_redpanda_core_admin_v2_broker_proto_rawDesc)))
	})
	return file_redpanda_core_admin_v2_broker_proto_rawDescData
}

var file_redpanda_core_admin_v2_broker_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_redpanda_core_admin_v2_broker_proto_goTypes = []any{
	(*GetBrokerRequest)(nil),    // 0: redpanda.core.admin.v2.GetBrokerRequest
	(*GetBrokerResponse)(nil),   // 1: redpanda.core.admin.v2.GetBrokerResponse
	(*ListBrokersRequest)(nil),  // 2: redpanda.core.admin.v2.ListBrokersRequest
	(*ListBrokersResponse)(nil), // 3: redpanda.core.admin.v2.ListBrokersResponse
	(*Broker)(nil),              // 4: redpanda.core.admin.v2.Broker
	(*BuildInfo)(nil),           // 5: redpanda.core.admin.v2.BuildInfo
	(*AdminServer)(nil),         // 6: redpanda.core.admin.v2.AdminServer
	(*RPCRoute)(nil),            // 7: redpanda.core.admin.v2.RPCRoute
}
var file_redpanda_core_admin_v2_broker_proto_depIdxs = []int32{
	4, // 0: redpanda.core.admin.v2.GetBrokerResponse.broker:type_name -> redpanda.core.admin.v2.Broker
	4, // 1: redpanda.core.admin.v2.ListBrokersResponse.brokers:type_name -> redpanda.core.admin.v2.Broker
	5, // 2: redpanda.core.admin.v2.Broker.build_info:type_name -> redpanda.core.admin.v2.BuildInfo
	6, // 3: redpanda.core.admin.v2.Broker.admin_server:type_name -> redpanda.core.admin.v2.AdminServer
	7, // 4: redpanda.core.admin.v2.AdminServer.routes:type_name -> redpanda.core.admin.v2.RPCRoute
	0, // 5: redpanda.core.admin.v2.BrokerService.GetBroker:input_type -> redpanda.core.admin.v2.GetBrokerRequest
	2, // 6: redpanda.core.admin.v2.BrokerService.ListBrokers:input_type -> redpanda.core.admin.v2.ListBrokersRequest
	1, // 7: redpanda.core.admin.v2.BrokerService.GetBroker:output_type -> redpanda.core.admin.v2.GetBrokerResponse
	3, // 8: redpanda.core.admin.v2.BrokerService.ListBrokers:output_type -> redpanda.core.admin.v2.ListBrokersResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_redpanda_core_admin_v2_broker_proto_init() }
func file_redpanda_core_admin_v2_broker_proto_init() {
	if File_redpanda_core_admin_v2_broker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_redpanda_core_admin_v2_broker_proto_rawDesc), len(file_redpanda_core_admin_v2_broker_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_core_admin_v2_broker_proto_goTypes,
		DependencyIndexes: file_redpanda_core_admin_v2_broker_proto_depIdxs,
		MessageInfos:      file_redpanda_core_admin_v2_broker_proto_msgTypes,
	}.Build()
	File_redpanda_core_admin_v2_broker_proto = out.File
	file_redpanda_core_admin_v2_broker_proto_goTypes = nil
	file_redpanda_core_admin_v2_broker_proto_depIdxs = nil
}
