// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: proto/redpanda/core/common/acl.proto

package common

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	_ "github.com/redpanda-data/common-go/proto/gen/go/redpanda/pbgen"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / The ACL resource types
type ACLResource int32

const (
	ACLResource_ACL_RESOURCE_UNSPECIFIED ACLResource = 0
	// Wildcard for selecting any ACL resource
	ACLResource_ACL_RESOURCE_ANY ACLResource = 1
	// Cluster wide resource
	ACLResource_ACL_RESOURCE_CLUSTER ACLResource = 2
	// Consumer group resource
	ACLResource_ACL_RESOURCE_GROUP ACLResource = 3
	// Topic resource
	ACLResource_ACL_RESOURCE_TOPIC ACLResource = 4
	// Transaction ID resource
	ACLResource_ACL_RESOURCE_TXN_ID ACLResource = 5
	// Schema Registry subject resource
	ACLResource_ACL_RESOURCE_SR_SUBJECT ACLResource = 6
	// Schema Registry wide resource
	ACLResource_ACL_RESOURCE_SR_REGISTRY ACLResource = 7
	// Wildcard to match any SR ACL resource
	ACLResource_ACL_RESOURCE_SR_ANY ACLResource = 8
)

// Enum value maps for ACLResource.
var (
	ACLResource_name = map[int32]string{
		0: "ACL_RESOURCE_UNSPECIFIED",
		1: "ACL_RESOURCE_ANY",
		2: "ACL_RESOURCE_CLUSTER",
		3: "ACL_RESOURCE_GROUP",
		4: "ACL_RESOURCE_TOPIC",
		5: "ACL_RESOURCE_TXN_ID",
		6: "ACL_RESOURCE_SR_SUBJECT",
		7: "ACL_RESOURCE_SR_REGISTRY",
		8: "ACL_RESOURCE_SR_ANY",
	}
	ACLResource_value = map[string]int32{
		"ACL_RESOURCE_UNSPECIFIED": 0,
		"ACL_RESOURCE_ANY":         1,
		"ACL_RESOURCE_CLUSTER":     2,
		"ACL_RESOURCE_GROUP":       3,
		"ACL_RESOURCE_TOPIC":       4,
		"ACL_RESOURCE_TXN_ID":      5,
		"ACL_RESOURCE_SR_SUBJECT":  6,
		"ACL_RESOURCE_SR_REGISTRY": 7,
		"ACL_RESOURCE_SR_ANY":      8,
	}
)

func (x ACLResource) Enum() *ACLResource {
	p := new(ACLResource)
	*p = x
	return p
}

func (x ACLResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLResource) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_redpanda_core_common_acl_proto_enumTypes[0].Descriptor()
}

func (ACLResource) Type() protoreflect.EnumType {
	return &file_proto_redpanda_core_common_acl_proto_enumTypes[0]
}

func (x ACLResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLResource.Descriptor instead.
func (ACLResource) EnumDescriptor() ([]byte, []int) {
	return file_proto_redpanda_core_common_acl_proto_rawDescGZIP(), []int{0}
}

// / The ACL pattern type
type ACLPattern int32

const (
	ACLPattern_ACL_PATTERN_UNSPECIFIED ACLPattern = 0
	// Wildcard to match any pattern
	ACLPattern_ACL_PATTERN_ANY ACLPattern = 1
	// Match a literal string
	ACLPattern_ACL_PATTERN_LITERAL ACLPattern = 2
	// Match a prefix
	ACLPattern_ACL_PATTERN_PREFIXED ACLPattern = 3
	// Match serves as a catch-all for all the names of a topic
	// the principal is authorized to access
	ACLPattern_ACL_PATTERN_MATCH ACLPattern = 4
)

// Enum value maps for ACLPattern.
var (
	ACLPattern_name = map[int32]string{
		0: "ACL_PATTERN_UNSPECIFIED",
		1: "ACL_PATTERN_ANY",
		2: "ACL_PATTERN_LITERAL",
		3: "ACL_PATTERN_PREFIXED",
		4: "ACL_PATTERN_MATCH",
	}
	ACLPattern_value = map[string]int32{
		"ACL_PATTERN_UNSPECIFIED": 0,
		"ACL_PATTERN_ANY":         1,
		"ACL_PATTERN_LITERAL":     2,
		"ACL_PATTERN_PREFIXED":    3,
		"ACL_PATTERN_MATCH":       4,
	}
)

func (x ACLPattern) Enum() *ACLPattern {
	p := new(ACLPattern)
	*p = x
	return p
}

func (x ACLPattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLPattern) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_redpanda_core_common_acl_proto_enumTypes[1].Descriptor()
}

func (ACLPattern) Type() protoreflect.EnumType {
	return &file_proto_redpanda_core_common_acl_proto_enumTypes[1]
}

func (x ACLPattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLPattern.Descriptor instead.
func (ACLPattern) EnumDescriptor() ([]byte, []int) {
	return file_proto_redpanda_core_common_acl_proto_rawDescGZIP(), []int{1}
}

// / The ACL operation to match
type ACLOperation int32

const (
	ACLOperation_ACL_OPERATION_UNSPECIFIED      ACLOperation = 0
	ACLOperation_ACL_OPERATION_ANY              ACLOperation = 1
	ACLOperation_ACL_OPERATION_READ             ACLOperation = 2
	ACLOperation_ACL_OPERATION_WRITE            ACLOperation = 3
	ACLOperation_ACL_OPERATION_CREATE           ACLOperation = 4
	ACLOperation_ACL_OPERATION_REMOVE           ACLOperation = 5
	ACLOperation_ACL_OPERATION_ALTER            ACLOperation = 6
	ACLOperation_ACL_OPERATION_DESCRIBE         ACLOperation = 7
	ACLOperation_ACL_OPERATION_CLUSTER_ACTION   ACLOperation = 8
	ACLOperation_ACL_OPERATION_DESCRIBE_CONFIGS ACLOperation = 9
	ACLOperation_ACL_OPERATION_ALTER_CONFIGS    ACLOperation = 10
	ACLOperation_ACL_OPERATION_IDEMPOTENT_WRITE ACLOperation = 11
)

// Enum value maps for ACLOperation.
var (
	ACLOperation_name = map[int32]string{
		0:  "ACL_OPERATION_UNSPECIFIED",
		1:  "ACL_OPERATION_ANY",
		2:  "ACL_OPERATION_READ",
		3:  "ACL_OPERATION_WRITE",
		4:  "ACL_OPERATION_CREATE",
		5:  "ACL_OPERATION_REMOVE",
		6:  "ACL_OPERATION_ALTER",
		7:  "ACL_OPERATION_DESCRIBE",
		8:  "ACL_OPERATION_CLUSTER_ACTION",
		9:  "ACL_OPERATION_DESCRIBE_CONFIGS",
		10: "ACL_OPERATION_ALTER_CONFIGS",
		11: "ACL_OPERATION_IDEMPOTENT_WRITE",
	}
	ACLOperation_value = map[string]int32{
		"ACL_OPERATION_UNSPECIFIED":      0,
		"ACL_OPERATION_ANY":              1,
		"ACL_OPERATION_READ":             2,
		"ACL_OPERATION_WRITE":            3,
		"ACL_OPERATION_CREATE":           4,
		"ACL_OPERATION_REMOVE":           5,
		"ACL_OPERATION_ALTER":            6,
		"ACL_OPERATION_DESCRIBE":         7,
		"ACL_OPERATION_CLUSTER_ACTION":   8,
		"ACL_OPERATION_DESCRIBE_CONFIGS": 9,
		"ACL_OPERATION_ALTER_CONFIGS":    10,
		"ACL_OPERATION_IDEMPOTENT_WRITE": 11,
	}
)

func (x ACLOperation) Enum() *ACLOperation {
	p := new(ACLOperation)
	*p = x
	return p
}

func (x ACLOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_redpanda_core_common_acl_proto_enumTypes[2].Descriptor()
}

func (ACLOperation) Type() protoreflect.EnumType {
	return &file_proto_redpanda_core_common_acl_proto_enumTypes[2]
}

func (x ACLOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLOperation.Descriptor instead.
func (ACLOperation) EnumDescriptor() ([]byte, []int) {
	return file_proto_redpanda_core_common_acl_proto_rawDescGZIP(), []int{2}
}

// / ACL permission types
type ACLPermissionType int32

const (
	ACLPermissionType_ACL_PERMISSION_TYPE_UNSPECIFIED ACLPermissionType = 0
	ACLPermissionType_ACL_PERMISSION_TYPE_ANY         ACLPermissionType = 1
	ACLPermissionType_ACL_PERMISSION_TYPE_ALLOW       ACLPermissionType = 2
	ACLPermissionType_ACL_PERMISSION_TYPE_DENY        ACLPermissionType = 3
)

// Enum value maps for ACLPermissionType.
var (
	ACLPermissionType_name = map[int32]string{
		0: "ACL_PERMISSION_TYPE_UNSPECIFIED",
		1: "ACL_PERMISSION_TYPE_ANY",
		2: "ACL_PERMISSION_TYPE_ALLOW",
		3: "ACL_PERMISSION_TYPE_DENY",
	}
	ACLPermissionType_value = map[string]int32{
		"ACL_PERMISSION_TYPE_UNSPECIFIED": 0,
		"ACL_PERMISSION_TYPE_ANY":         1,
		"ACL_PERMISSION_TYPE_ALLOW":       2,
		"ACL_PERMISSION_TYPE_DENY":        3,
	}
)

func (x ACLPermissionType) Enum() *ACLPermissionType {
	p := new(ACLPermissionType)
	*p = x
	return p
}

func (x ACLPermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLPermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_redpanda_core_common_acl_proto_enumTypes[3].Descriptor()
}

func (ACLPermissionType) Type() protoreflect.EnumType {
	return &file_proto_redpanda_core_common_acl_proto_enumTypes[3]
}

func (x ACLPermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLPermissionType.Descriptor instead.
func (ACLPermissionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_redpanda_core_common_acl_proto_rawDescGZIP(), []int{3}
}

var File_proto_redpanda_core_common_acl_proto protoreflect.FileDescriptor

const file_proto_redpanda_core_common_acl_proto_rawDesc = "" +
	"\n" +
	"$proto/redpanda/core/common/acl.proto\x12\x14redpanda.core.common\x1a\"proto/redpanda/pbgen/options.proto*\xf8\x01\n" +
	"\vACLResource\x12\x1c\n" +
	"\x18ACL_RESOURCE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10ACL_RESOURCE_ANY\x10\x01\x12\x18\n" +
	"\x14ACL_RESOURCE_CLUSTER\x10\x02\x12\x16\n" +
	"\x12ACL_RESOURCE_GROUP\x10\x03\x12\x16\n" +
	"\x12ACL_RESOURCE_TOPIC\x10\x04\x12\x17\n" +
	"\x13ACL_RESOURCE_TXN_ID\x10\x05\x12\x1b\n" +
	"\x17ACL_RESOURCE_SR_SUBJECT\x10\x06\x12\x1c\n" +
	"\x18ACL_RESOURCE_SR_REGISTRY\x10\a\x12\x17\n" +
	"\x13ACL_RESOURCE_SR_ANY\x10\b*\x88\x01\n" +
	"\n" +
	"ACLPattern\x12\x1b\n" +
	"\x17ACL_PATTERN_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fACL_PATTERN_ANY\x10\x01\x12\x17\n" +
	"\x13ACL_PATTERN_LITERAL\x10\x02\x12\x18\n" +
	"\x14ACL_PATTERN_PREFIXED\x10\x03\x12\x15\n" +
	"\x11ACL_PATTERN_MATCH\x10\x04*\xe9\x02\n" +
	"\fACLOperation\x12\x1d\n" +
	"\x19ACL_OPERATION_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ACL_OPERATION_ANY\x10\x01\x12\x16\n" +
	"\x12ACL_OPERATION_READ\x10\x02\x12\x17\n" +
	"\x13ACL_OPERATION_WRITE\x10\x03\x12\x18\n" +
	"\x14ACL_OPERATION_CREATE\x10\x04\x12\x18\n" +
	"\x14ACL_OPERATION_REMOVE\x10\x05\x12\x17\n" +
	"\x13ACL_OPERATION_ALTER\x10\x06\x12\x1a\n" +
	"\x16ACL_OPERATION_DESCRIBE\x10\a\x12 \n" +
	"\x1cACL_OPERATION_CLUSTER_ACTION\x10\b\x12\"\n" +
	"\x1eACL_OPERATION_DESCRIBE_CONFIGS\x10\t\x12\x1f\n" +
	"\x1bACL_OPERATION_ALTER_CONFIGS\x10\n" +
	"\x12\"\n" +
	"\x1eACL_OPERATION_IDEMPOTENT_WRITE\x10\v*\x92\x01\n" +
	"\x11ACLPermissionType\x12#\n" +
	"\x1fACL_PERMISSION_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17ACL_PERMISSION_TYPE_ANY\x10\x01\x12\x1d\n" +
	"\x19ACL_PERMISSION_TYPE_ALLOW\x10\x02\x12\x1c\n" +
	"\x18ACL_PERMISSION_TYPE_DENY\x10\x03B\xec\x01\xea\x92\x19\fproto::admin\n" +
	"\x18com.redpanda.core.commonB\bAclProtoP\x01ZDgithub.com/redpanda-data/common-go/proto/gen/go/redpanda/core/common\xa2\x02\x03RCC\xaa\x02\x14Redpanda.Core.Common\xca\x02\x14Redpanda\\Core\\Common\xe2\x02 Redpanda\\Core\\Common\\GPBMetadata\xea\x02\x16Redpanda::Core::Commonb\x06proto3"

var (
	file_proto_redpanda_core_common_acl_proto_rawDescOnce sync.Once
	file_proto_redpanda_core_common_acl_proto_rawDescData []byte
)

func file_proto_redpanda_core_common_acl_proto_rawDescGZIP() []byte {
	file_proto_redpanda_core_common_acl_proto_rawDescOnce.Do(func() {
		file_proto_redpanda_core_common_acl_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_redpanda_core_common_acl_proto_rawDesc), len(file_proto_redpanda_core_common_acl_proto_rawDesc)))
	})
	return file_proto_redpanda_core_common_acl_proto_rawDescData
}

var file_proto_redpanda_core_common_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_redpanda_core_common_acl_proto_goTypes = []any{
	(ACLResource)(0),       // 0: redpanda.core.common.ACLResource
	(ACLPattern)(0),        // 1: redpanda.core.common.ACLPattern
	(ACLOperation)(0),      // 2: redpanda.core.common.ACLOperation
	(ACLPermissionType)(0), // 3: redpanda.core.common.ACLPermissionType
}
var file_proto_redpanda_core_common_acl_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_redpanda_core_common_acl_proto_init() }
func file_proto_redpanda_core_common_acl_proto_init() {
	if File_proto_redpanda_core_common_acl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_redpanda_core_common_acl_proto_rawDesc), len(file_proto_redpanda_core_common_acl_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_redpanda_core_common_acl_proto_goTypes,
		DependencyIndexes: file_proto_redpanda_core_common_acl_proto_depIdxs,
		EnumInfos:         file_proto_redpanda_core_common_acl_proto_enumTypes,
	}.Build()
	File_proto_redpanda_core_common_acl_proto = out.File
	file_proto_redpanda_core_common_acl_proto_goTypes = nil
	file_proto_redpanda_core_common_acl_proto_depIdxs = nil
}
