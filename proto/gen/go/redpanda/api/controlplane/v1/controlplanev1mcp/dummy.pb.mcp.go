// Code generated by protoc-gen-mcp-go. DO NOT EDIT.
// source: redpanda/api/controlplane/v1/dummy.proto

package controlplanev1mcp

import (
	"context"
	"encoding/json"

	v1 "buf.build/gen/go/redpandadata/cloud/protocolbuffers/go/redpanda/api/controlplane/v1"
	"connectrpc.com/connect"
	"github.com/mark3labs/mcp-go/mcp"
	mcpserver "github.com/mark3labs/mcp-go/server"
	"google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

var (
	DummyService_DummyMethodTool = mcp.Tool{Name: "redpanda_api_controlplane_v1_DummyService_DummyMethod", Description: "", InputSchema: mcp.ToolInputSchema{Type: "", Properties: map[string]interface{}(nil), Required: []string(nil)}, RawInputSchema: json.RawMessage{0x7b, 0x22, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x7b, 0x7d, 0x2c, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x3a, 0x5b, 0x5d, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x7d}}
)

// DummyServiceServer is compatible with the grpc-go server interface.
type DummyServiceServer interface {
	DummyMethod(ctx context.Context, req *emptypb.Empty) (*v1.DummyMethodResponse, error)
}

func RegisterDummyServiceHandler(s *mcpserver.MCPServer, srv DummyServiceServer) {
	s.AddTool(DummyService_DummyMethodTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		marshaled, err := json.Marshal(request.Params.Arguments)
		if err != nil {
			return nil, err
		}

		var req emptypb.Empty
		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := srv.DummyMethod(ctx, &req)
		if err != nil {
			return nil, err
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp)
		if err != nil {
			return nil, err
		}
		return mcp.NewToolResultText(string(marshaled)), nil
	})
}

// ConnectDummyServiceClient is compatible with the connectrpc-go client interface.
type ConnectDummyServiceClient interface {
	DummyMethod(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.DummyMethodResponse], error)
}

// Register connectrpc handler, to forward MCP calls to it.
func ForwardToConnectDummyServiceClient(s *mcpserver.MCPServer, client ConnectDummyServiceClient) {
	s.AddTool(DummyService_DummyMethodTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		marshaled, err := json.Marshal(request.Params.Arguments)
		if err != nil {
			return nil, err
		}

		var req emptypb.Empty
		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := client.DummyMethod(ctx, connect.NewRequest(&req))
		if err != nil {
			return nil, err
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp.Msg)
		if err != nil {
			return nil, err
		}
		return mcp.NewToolResultText(string(marshaled)), nil
	})
}
