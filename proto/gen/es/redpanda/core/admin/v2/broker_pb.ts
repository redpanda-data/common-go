// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=,js_import_style=legacy_commonjs"
// @generated from file redpanda/core/admin/v2/broker.proto (package redpanda.core.admin.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GetBrokerRequest returns information about a single broker in the cluster
 *
 * @generated from message redpanda.core.admin.v2.GetBrokerRequest
 */
export class GetBrokerRequest extends Message<GetBrokerRequest> {
  /**
   * The node ID for the broker. If set to -1 then the broker handling the RPC
   * request will response with it's own information.
   *
   * @generated from field: int32 node_id = 1;
   */
  nodeId = 0;

  constructor(data?: PartialMessage<GetBrokerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.GetBrokerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBrokerRequest {
    return new GetBrokerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBrokerRequest {
    return new GetBrokerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBrokerRequest {
    return new GetBrokerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBrokerRequest | PlainMessage<GetBrokerRequest> | undefined, b: GetBrokerRequest | PlainMessage<GetBrokerRequest> | undefined): boolean {
    return proto3.util.equals(GetBrokerRequest, a, b);
  }
}

/**
 * GetBrokerResponse is the response from the GetBroker RPC.
 *
 * @generated from message redpanda.core.admin.v2.GetBrokerResponse
 */
export class GetBrokerResponse extends Message<GetBrokerResponse> {
  /**
   * The specified broker and it's information.
   *
   * @generated from field: redpanda.core.admin.v2.Broker broker = 1;
   */
  broker?: Broker;

  constructor(data?: PartialMessage<GetBrokerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.GetBrokerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "broker", kind: "message", T: Broker },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBrokerResponse {
    return new GetBrokerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBrokerResponse {
    return new GetBrokerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBrokerResponse {
    return new GetBrokerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBrokerResponse | PlainMessage<GetBrokerResponse> | undefined, b: GetBrokerResponse | PlainMessage<GetBrokerResponse> | undefined): boolean {
    return proto3.util.equals(GetBrokerResponse, a, b);
  }
}

/**
 * ListBrokersRequest returns information about all the brokers in the cluster
 *
 * @generated from message redpanda.core.admin.v2.ListBrokersRequest
 */
export class ListBrokersRequest extends Message<ListBrokersRequest> {
  constructor(data?: PartialMessage<ListBrokersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.ListBrokersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBrokersRequest {
    return new ListBrokersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBrokersRequest {
    return new ListBrokersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBrokersRequest {
    return new ListBrokersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBrokersRequest | PlainMessage<ListBrokersRequest> | undefined, b: ListBrokersRequest | PlainMessage<ListBrokersRequest> | undefined): boolean {
    return proto3.util.equals(ListBrokersRequest, a, b);
  }
}

/**
 * ListBrokersResponse is the response from the ListBrokers RPC.
 *
 * @generated from message redpanda.core.admin.v2.ListBrokersResponse
 */
export class ListBrokersResponse extends Message<ListBrokersResponse> {
  /**
   * The brokers in the cluster and their information.
   *
   * @generated from field: repeated redpanda.core.admin.v2.Broker brokers = 1;
   */
  brokers: Broker[] = [];

  constructor(data?: PartialMessage<ListBrokersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.ListBrokersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "brokers", kind: "message", T: Broker, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBrokersResponse {
    return new ListBrokersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBrokersResponse {
    return new ListBrokersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBrokersResponse {
    return new ListBrokersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBrokersResponse | PlainMessage<ListBrokersResponse> | undefined, b: ListBrokersResponse | PlainMessage<ListBrokersResponse> | undefined): boolean {
    return proto3.util.equals(ListBrokersResponse, a, b);
  }
}

/**
 * The resource for an individual broker within the Kafka Cluster.
 *
 * @generated from message redpanda.core.admin.v2.Broker
 */
export class Broker extends Message<Broker> {
  /**
   * This broker's node ID.
   *
   * @generated from field: int32 node_id = 1;
   */
  nodeId = 0;

  /**
   * The build this broker is running.
   *
   * @generated from field: redpanda.core.admin.v2.BuildInfo build_info = 2;
   */
  buildInfo?: BuildInfo;

  /**
   * The admin server information.
   *
   * @generated from field: redpanda.core.admin.v2.AdminServer admin_server = 3;
   */
  adminServer?: AdminServer;

  constructor(data?: PartialMessage<Broker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.Broker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "build_info", kind: "message", T: BuildInfo },
    { no: 3, name: "admin_server", kind: "message", T: AdminServer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Broker {
    return new Broker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Broker {
    return new Broker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Broker {
    return new Broker().fromJsonString(jsonString, options);
  }

  static equals(a: Broker | PlainMessage<Broker> | undefined, b: Broker | PlainMessage<Broker> | undefined): boolean {
    return proto3.util.equals(Broker, a, b);
  }
}

/**
 * BuildInfo contains information about the Redpanda build.
 *
 * @generated from message redpanda.core.admin.v2.BuildInfo
 */
export class BuildInfo extends Message<BuildInfo> {
  /**
   * A version string of Redpanda like "v25.2.1"
   *
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * The git commit SHA of the build.
   *
   * @generated from field: string build_sha = 2;
   */
  buildSha = "";

  constructor(data?: PartialMessage<BuildInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.BuildInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildInfo {
    return new BuildInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildInfo {
    return new BuildInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildInfo {
    return new BuildInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BuildInfo | PlainMessage<BuildInfo> | undefined, b: BuildInfo | PlainMessage<BuildInfo> | undefined): boolean {
    return proto3.util.equals(BuildInfo, a, b);
  }
}

/**
 * AdminServer has information about the admin server within the broker.
 *
 * @generated from message redpanda.core.admin.v2.AdminServer
 */
export class AdminServer extends Message<AdminServer> {
  /**
   * All of the ConnectRPC routes available on this admin server.
   *
   * @generated from field: repeated redpanda.core.admin.v2.RPCRoute routes = 1;
   */
  routes: RPCRoute[] = [];

  constructor(data?: PartialMessage<AdminServer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.AdminServer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "routes", kind: "message", T: RPCRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminServer {
    return new AdminServer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminServer {
    return new AdminServer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminServer {
    return new AdminServer().fromJsonString(jsonString, options);
  }

  static equals(a: AdminServer | PlainMessage<AdminServer> | undefined, b: AdminServer | PlainMessage<AdminServer> | undefined): boolean {
    return proto3.util.equals(AdminServer, a, b);
  }
}

/**
 * A route in the Admin API RPC server.
 *
 * @generated from message redpanda.core.admin.v2.RPCRoute
 */
export class RPCRoute extends Message<RPCRoute> {
  /**
   * The name of the RPC method.
   *
   * For example `redpanda.core.admin.v2.AdminService.GetVersion`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The HTTP route for this RPC method.
   *
   * For example `/redpanda.core.admin.v2.AdminService/GetVersion`
   *
   * @generated from field: string http_route = 2;
   */
  httpRoute = "";

  constructor(data?: PartialMessage<RPCRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.core.admin.v2.RPCRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "http_route", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RPCRoute {
    return new RPCRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RPCRoute {
    return new RPCRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RPCRoute {
    return new RPCRoute().fromJsonString(jsonString, options);
  }

  static equals(a: RPCRoute | PlainMessage<RPCRoute> | undefined, b: RPCRoute | PlainMessage<RPCRoute> | undefined): boolean {
    return proto3.util.equals(RPCRoute, a, b);
  }
}

