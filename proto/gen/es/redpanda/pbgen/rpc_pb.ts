// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=,js_import_style=legacy_commonjs"
// @generated from file proto/redpanda/pbgen/rpc.proto (package redpanda.pbgen, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The authentication level for this handler.
 *
 * @generated from enum redpanda.pbgen.RPCAuthZLevel
 */
export enum RPCAuthZLevel {
  /**
   * @generated from enum value: LEVEL_UNSPECIFIED = 0;
   */
  LEVEL_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PUBLIC = 1;
   */
  PUBLIC = 1,

  /**
   * @generated from enum value: USER = 2;
   */
  USER = 2,

  /**
   * @generated from enum value: SUPERUSER = 3;
   */
  SUPERUSER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RPCAuthZLevel)
proto3.util.setEnumType(RPCAuthZLevel, "redpanda.pbgen.RPCAuthZLevel", [
  { no: 0, name: "LEVEL_UNSPECIFIED" },
  { no: 1, name: "PUBLIC" },
  { no: 2, name: "USER" },
  { no: 3, name: "SUPERUSER" },
]);

/**
 * @generated from message redpanda.pbgen.RPCOptions
 */
export class RPCOptions extends Message<RPCOptions> {
  /**
   * The authentication level required to invoke the handler. Must be
   * specified.
   *
   * APIs should default to SUPERUSER, if you'd like to create an admin API at
   * another level, please consult the Redpanda core team first.
   *
   * @generated from field: redpanda.pbgen.RPCAuthZLevel authz = 2;
   */
  authz = RPCAuthZLevel.LEVEL_UNSPECIFIED;

  /**
   * The alternative HTTP route to use for this handler. This is used to give
   * "prettier" HTTP routes to the user. This is an additional route used to
   * alias the ConnectRPC route that is automatically generated.
   *
   * @generated from field: string http_route = 3;
   */
  httpRoute = "";

  constructor(data?: PartialMessage<RPCOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.pbgen.RPCOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "authz", kind: "enum", T: proto3.getEnumType(RPCAuthZLevel) },
    { no: 3, name: "http_route", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RPCOptions {
    return new RPCOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RPCOptions {
    return new RPCOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RPCOptions {
    return new RPCOptions().fromJsonString(jsonString, options);
  }

  static equals(a: RPCOptions | PlainMessage<RPCOptions> | undefined, b: RPCOptions | PlainMessage<RPCOptions> | undefined): boolean {
    return proto3.util.equals(RPCOptions, a, b);
  }
}

