// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension=,js_import_style=legacy_commonjs"
// @generated from file redpanda/api/common/v1/auditlog.proto (package redpanda.api.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Field-level audit policy
 *
 * @generated from enum redpanda.api.common.v1.AuditPolicy
 */
export enum AuditPolicy {
  /**
   * Defaults to STANDARD for opted-in messages
   *
   * @generated from enum value: AUDIT_POLICY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Field excluded from audit logs
   *
   * @generated from enum value: AUDIT_POLICY_NEVER = 1;
   */
  NEVER = 1,

  /**
   * Field present but value redacted
   *
   * @generated from enum value: AUDIT_POLICY_REDACTED = 2;
   */
  REDACTED = 2,

  /**
   * Field logged as-is (default)
   *
   * @generated from enum value: AUDIT_POLICY_STANDARD = 3;
   */
  STANDARD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AuditPolicy)
proto3.util.setEnumType(AuditPolicy, "redpanda.api.common.v1.AuditPolicy", [
  { no: 0, name: "AUDIT_POLICY_UNSPECIFIED" },
  { no: 1, name: "AUDIT_POLICY_NEVER" },
  { no: 2, name: "AUDIT_POLICY_REDACTED" },
  { no: 3, name: "AUDIT_POLICY_STANDARD" },
]);

/**
 * Service-level audit configuration message
 *
 * @generated from message redpanda.api.common.v1.ServiceAuditConfig
 */
export class ServiceAuditConfig extends Message<ServiceAuditConfig> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<ServiceAuditConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.common.v1.ServiceAuditConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceAuditConfig {
    return new ServiceAuditConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceAuditConfig {
    return new ServiceAuditConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceAuditConfig {
    return new ServiceAuditConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceAuditConfig | PlainMessage<ServiceAuditConfig> | undefined, b: ServiceAuditConfig | PlainMessage<ServiceAuditConfig> | undefined): boolean {
    return proto3.util.equals(ServiceAuditConfig, a, b);
  }
}

/**
 * Method-level audit configuration message
 *
 * @generated from message redpanda.api.common.v1.MethodAuditConfig
 */
export class MethodAuditConfig extends Message<MethodAuditConfig> {
  /**
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  constructor(data?: PartialMessage<MethodAuditConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.common.v1.MethodAuditConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodAuditConfig {
    return new MethodAuditConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodAuditConfig {
    return new MethodAuditConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodAuditConfig {
    return new MethodAuditConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MethodAuditConfig | PlainMessage<MethodAuditConfig> | undefined, b: MethodAuditConfig | PlainMessage<MethodAuditConfig> | undefined): boolean {
    return proto3.util.equals(MethodAuditConfig, a, b);
  }
}

